[MUSIC] So now we understand
information visualization. We can start to think of how
we would design an information visualization system. So when creating a visualization system,
you're really creating a user interface. It's an interface between the user and
the data facilitated by a computer. And so data visualization systems
are really graphical user interfaces. You're using the computer to
graphically represent the data. So principles from user interface design
are important in constructing a good, effective visualization system. You already have
an understanding of the system, of how the graphics works in the system,
and how we display data with the system. You have a good understanding
of how users work based on what we covered
in Module 1 of this course. We'll also need to focus on the goals. What does the user hope to achieve, and the tasks that they'll be
performing to achieve those goals. And also the interaction. We'll need to be able to represent and
understand the interaction of the user and the system, and, for example,
describe a dialogue, a language of clicks and
selections, and so on, so that the users can perform tasks in
a way that's intuitive and productive. So we'll follow some standard
sequences of forming a system design. Designing a visualization system is
similar to designing a software system or other systems in general. We start with a basic
requirement specification. And that's basically going to
try to figure out what specific problems the system is going to solve. Who's the system going to serve? And how will that person
be able to make a decision based on your visualization system? This involves a lot of
discussions with the user. I see focus groups used for this, but
it's important that the focus groups and interviews with the user aren't asking
the user specifically what kind of interface or what kind of
visualization system they want, because you're going to be the expert
of the visualization system. Often the users don't know what's
out there, what's available, what will serve them best, and so you want
to focus on what questions they want to answer with the system and how can
you get that information to them so that they'll have everything they
need to answer those questions. Then there's an architectural design, and this is breaking the full system
down into component systems. If you're making
a visualization dashboard, then these would be the individual
elements of that dashboard. And then there's a component design that you're going to figure out how to
implement each of those elements. And then you go through a step of
actually implementing, actually coding or setting up the system for
each of these components. Then you do some debugging to
test each of the components. And then an important
step is user evaluation. Once you have these components,
you'll want to make sure and test them with users to make sure they're
doing want they're supposed to be doing, that the user is using them the way
that you intended to use them. And also to use some statistics to make
sure that you're not just basing your evaluation on anecdotal evidence, but that the user is actually
using the system effectively. And then finally maintenance
documentations for the system and fixing. It's easy to underestimate this process,
and when people make estimates of how long it will take to implement such
systems they, focus on implementation, and you'll see implementation is
maybe one of seven steps here. And that's why we say when we're designing
software systems or user interfaces or visualization systems, you want to take
the amount of time you think it should take, and then you want to double it. And by doubling it, you're then realizing
that you're going to have to be doing debugging and some component design. And then you want to double it again,
because you also need to do the analysis and the requirements specification and
the evaluation and the maintenance. And so, if we tend to underestimate
by just looking at implementation, it really takes six to eight times
as long to actually create a system when you're doing it right. Some other advice when making these
systems is to use prototypes. We talk about user evaluation here at
the end, but you should be doing user evaluations and user testings at every
stage of this, checking with the user in some form or another, either with a
model of the user or with the actual user. And so you want to use prototypes to
simulate how the system might work when you're doing a requirement specification
and then move to an architectural design. For the architectural design,
you might want to have a mockup of a possible interface and put that in
front of the user to determine that that meets the requirements that
the system needs to provide. Or, you may even have a Wizard of Oz
system where you simulate the system without it actually working the way it's
supposed to on a very specific case. You can hard-code a system to work and you can see as you're doing component
design if that was in a biosystem, that simulation of the system that
you designed is going to satisfy it before you actually invest the time
in implementing the system. You don't always have to go back
to the user to get these answers. Often, especially as you're working
on the design stages of the system, that you can use models of the task and
dialog. So the user model, based on
the requirement specification you'll have an idea of what goals
the user will want to solve. And you can start decomposing tasks and creating task analyses that go
into the layout of components that can make sure that they meet
the requirements as specified. And finally, as I mentioned before, don't wait until the very end
to do this component testing. You'll want to test each of these if
you've created a good model of the user, and the dialog, and the tasks, and so on. You can start to do some testing of
your design before you've invested in the implementation time. So for user modeling, there's a variety of
different techniques for modeling users. You want to focus on what the user
needs to answer a question. You want to provide a visualization that
will help the user answer a question, and you don't necessarily want to create
the fanciest visualization or use every facility that's
available on the computer system. You want to try to get
into the head of the user. Try to look at the system from the user's
point of view instead of, for example, the programmer's point of view, or
a system designer's point of view. And you want to know your user. What's the user familiar with? What other tools are they using? What's the user's role among other users,
or among other people in their organization? What might the user know, and
what might the user not understand? And then finally, what's the users
motivation in using the system? How can you best provide
the information in a way that the user will want to use the system and know
what to do to properly use the system? Finally, it's good to do
a cognitive walkthrough, put yourself in the head of the user and
map out, write out in diagrams what should be on the mind of the user as
they're using your visualization system, so that you can better present data based
on what the user is currently focusing on. And so there's a variety of user modelling
techniques, one of them is an old one, it's called GOMS. It stands for goals, operators,
methods, and selections, and it helps you to understand
what a user might be thinking of. Users are going to be goal-oriented, and
so it's good to map out the goals for the system. It's also good to think of the operators
as you're designing the system. What are the operations, the basic user actions that the user's
going to be using to achieve the goals? And the user's going to be forming methods
by stringing together these operations, and there may be multiple
methods of achieving a goal. Which ones are you going to support,
try to support as many of them, there's more than one way to skin a cat. Users will have different
methods to achieve a goal, and you want to be as flexible as
possible in supporting those. And then finally, selections. When there's multiple methods, the user's
going to have different ways of selecting which method to use, and you want to
provide as much information as possible to be able to make an appropriate selection. A user's going to have a goal, and
each goal is going to have a task or multiple tasks associated with
achieving that goal, and so you want to make sure that your
system can connect tasks into goals, and so this is the principal of user
interface design called synthesizability. Is a user sitting in front of your system
going to know how to use your system to arrive at an answer if you
have a visualization dashboard? Is the user going to know where to look
at on your dashboard in order to be able to come to a conclusion based
on the information presented? And so these tasks often get complicated,
and so you'll need to decompose tasks into
subtasks and goals into subgoals, and then tasks will follow a sequence,
and those sequences are plans. And how can you articulate that plan so
that the user can synthesize it when they're sitting in front of
you visualization system? You may want to look at conditional
tasks when a selection needs to be made. What are the triggers for
a conditional task? When does a subwindow need to be opened? When can some operations be avoided? You might also consider wait times,
delays in information processing, or when the user is interrupted,
cyclic tasks or multiple parallel tasks. And then you can use all of these
results to sort of imply the best dashboard layout that best facilitates
the user getting the information they need to be able to make a good
informed decision. So here's some examples of dashboards. This is a old dashboard from
2001 SIGCHI visualization, but it would still be
used in modern contexts. It's used if you're monitoring
newsgroups or online conversations. We've had these for 15 years and longer. And this one's shown to work really well. It starts with a thread tree, and it's
basically a conversation with a subject, and then people replying to that subject. And other people are replying
to the original subject, and people are replying to the second
reply to the original subject. And so you get this tree like behavior. And it's organized chronologically,
vertically but then you form a hierarchy
based on replying. Which messages reply to
which other messages? And then you've got the users, and
the users are provided here in this second visualization, and you have kind
of a Gantt chart called a piano roll. And it's basically corresponding
to posting which messages in time horizontally, and then you've got it
sorted vertically by the number of posts. And then you've got this sociogram,in
this case it's just a social network, just a graph where you've got connections
based on who's replying to whose message. But the horizontal and
vertical position of nodes is indicating horizontally the number
of responses each person sends, and vertically by the number
of responses they get. And so this original poster is
getting a lot of responses, and the rest of these are getting
some responses to their posts. And then finally we
want details on demand. You've got this detail selection so
you can select a node here. You can select a person here, it gets
highlighted in the thread tree here. You can select an individual node here and see what the actual post is in order
to drill down to those details. Another example of a dashboard is the CDC,
Center for Disease Control,
FluView which shows in the US how the flu is progressing through the year and
which strains of the flu are occurring. And so you can see peak times for flu,
which strains of the flu are happening, you get a map here so
you can determine by region. For example, this is the region where
the University of Illinois is, and I can see which flus I should
be on the lookout for and which times I should
be on the lookout for. And I can start to make a decision
based on this data how at risk I am or other people I know might be at risk for
the flu. Andt here's also a Uuniversity of Illinois
at Urbana-Chmpaign strategic plan dashboard. And we have a strategic plan
that has several elements. For example, fostering scholarship,
discovering innovation, providing transformative learning experiences,
societal impact, stewarding resources. And then we have individual graphs in
our dashboard that we can select for each of these elements that tell us how
we're doing with each of these elements. But the graphs also don't just
give the raw data, they give, for example, goals, where we want to
be with some of these elements. In some cases we're doing
well compared to our goals, in some cases we're not doing
as well compared to our goals. And then that can motivate
us to do a better job. So following these design rules, these
sequences for designing a visualization system, you can start to design your
own dashboard that focuses these visualization tools on your own data so
you can use it to make better decisions. [MUSIC]